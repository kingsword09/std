(function () {
  window.DENO_DOC_SEARCH_INDEX = {"kind":"search","nodes":[{"kind":[{"char":"I","kind":"Interface","title":"Interface"},{"char":"I","kind":"Interface","title":"Interface"},{"char":"I","kind":"Interface","title":"Interface"},{"char":"I","kind":"Interface","title":"Interface"}],"name":"Environment","file":"denokit/mod.ts","doc":"","url":"./denokit/mod.ts/~/Environment.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.env","file":"denokit/mod.ts","doc":"Gets an environment variable.","url":"./denokit/mod.ts/~/Environment.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.stat","file":"denokit/mod.ts","doc":"Resolves the `Deno.FileInfo` for the specified\npath following symlinks.","url":"./denokit/mod.ts/~/Environment.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.statSync","file":"denokit/mod.ts","doc":"Synchronously resolves the `Deno.FileInfo` for\nthe specified path following symlinks.","url":"./denokit/mod.ts/~/Environment.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.requestPermission","file":"denokit/mod.ts","doc":"Optional method for requesting broader permissions for a folder\ninstead of asking for each file when the operating system requires\nprobing multiple files for an executable path.\n\nThis is not the default, but is useful on Windows for example.","url":"./denokit/mod.ts/~/Environment.requestPermission.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Environment.os","file":"denokit/mod.ts","doc":"Gets the current operating system.","url":"./denokit/mod.ts/~/Environment.os.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.env","file":"denokit/mod.ts","doc":"Gets an environment variable.","url":"./denokit/mod.ts/~/Environment.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.stat","file":"denokit/mod.ts","doc":"Resolves the `Deno.FileInfo` for the specified\npath following symlinks.","url":"./denokit/mod.ts/~/Environment.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.statSync","file":"denokit/mod.ts","doc":"Synchronously resolves the `Deno.FileInfo` for\nthe specified path following symlinks.","url":"./denokit/mod.ts/~/Environment.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.requestPermission","file":"denokit/mod.ts","doc":"Optional method for requesting broader permissions for a folder\ninstead of asking for each file when the operating system requires\nprobing multiple files for an executable path.\n\nThis is not the default, but is useful on Windows for example.","url":"./denokit/mod.ts/~/Environment.requestPermission.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Environment.os","file":"denokit/mod.ts","doc":"Gets the current operating system.","url":"./denokit/mod.ts/~/Environment.os.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"which","file":"denokit/mod.ts","doc":"Finds the path to the specified command, supporting both synchronous and asynchronous usage.\nReturns the absolute path to the executable if found, otherwise returns undefined.\nThis function is a \"quansync\" wrapper, so you can use it in both sync and async contexts.\n","url":"./denokit/mod.ts/~/which.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"whichAsync","file":"denokit/mod.ts","doc":"Finds the path to the specified command asynchronously.","url":"./denokit/mod.ts/~/whichAsync.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"whichSync","file":"denokit/mod.ts","doc":"Finds the path to the specified command synchronously.","url":"./denokit/mod.ts/~/whichSync.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"}],"name":"Binary","file":"denokit/src/binary-install.ts","doc":"A class for managing binary executables.\nProvides methods to check if a binary exists, install it from a URL, and run it.\n","url":"./denokit/src/binary-install.ts/~/Binary.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Binary.prototype.exists","file":"denokit/src/binary-install.ts","doc":"Checks if the binary exists.\n","url":"./denokit/src/binary-install.ts/~/Binary.prototype.exists.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Binary.prototype.install","file":"denokit/src/binary-install.ts","doc":"Installs the binary from the URL.\n","url":"./denokit/src/binary-install.ts/~/Binary.prototype.install.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Binary.prototype.run","file":"denokit/src/binary-install.ts","doc":"Runs the binary.\n","url":"./denokit/src/binary-install.ts/~/Binary.prototype.run.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"BinaryConfig","file":"denokit/src/binary-install.ts","doc":"Configuration options for the Binary class.","url":"./denokit/src/binary-install.ts/~/BinaryConfig.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"BinaryConfig.installDirectory","file":"denokit/src/binary-install.ts","doc":"","url":"./denokit/src/binary-install.ts/~/BinaryConfig.installDirectory.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"downloadAndExtractTarGz","file":"denokit/src/download.ts","doc":"Downloads a tar.gz file from a URL and extracts it to a destination path.\n","url":"./denokit/src/download.ts/~/downloadAndExtractTarGz.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.env","file":"nodekit/mod.ts","doc":"Gets an environment variable.","url":"./nodekit/mod.ts/~/Environment.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.stat","file":"nodekit/mod.ts","doc":"Resolves the `NodeFS.Dirent` for the specified\npath following symlinks.","url":"./nodekit/mod.ts/~/Environment.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.statSync","file":"nodekit/mod.ts","doc":"Synchronously resolves the `NodeFS.Dirent` for\nthe specified path following symlinks.","url":"./nodekit/mod.ts/~/Environment.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.requestPermission","file":"nodekit/mod.ts","doc":"Optional method for requesting broader permissions for a folder\ninstead of asking for each file when the operating system requires\nprobing multiple files for an executable path.\n\nThis is not the default, but is useful on Windows for example.","url":"./nodekit/mod.ts/~/Environment.requestPermission.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Environment.os","file":"nodekit/mod.ts","doc":"Gets the current operating system.","url":"./nodekit/mod.ts/~/Environment.os.html","deprecated":false},{"kind":[{"char":"c","kind":"Class","title":"Class"},{"char":"c","kind":"Class","title":"Class"}],"name":"RealEnvironment","file":"nodekit/mod.ts","doc":"Default implementation that interacts with the file system and process env vars.","url":"./nodekit/mod.ts/~/RealEnvironment.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.env","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/RealEnvironment.prototype.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.stat","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/RealEnvironment.prototype.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.statSync","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/RealEnvironment.prototype.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.os","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/RealEnvironment.prototype.os.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"},{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"WriteFileSimpleOptions","file":"nodekit/mod.ts","doc":"Options for writeFileSimple","url":"./nodekit/mod.ts/~/WriteFileSimpleOptions.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"exists","file":"nodekit/mod.ts","doc":"Check if a file or directory exists at the given path\n","url":"./nodekit/mod.ts/~/exists.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"mkdirIfNotExists","file":"nodekit/mod.ts","doc":"Create a directory if it does not exist\n","url":"./nodekit/mod.ts/~/mkdirIfNotExists.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"normalizePath","file":"nodekit/mod.ts","doc":"Normalize path to be compatible with Deno\n","url":"./nodekit/mod.ts/~/normalizePath.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"readFile","file":"nodekit/mod.ts","doc":"Read file content from filesystem","url":"./nodekit/mod.ts/~/readFile.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"readJson","file":"nodekit/mod.ts","doc":"Read json or jsonc file content from filesystem\n","url":"./nodekit/mod.ts/~/readJson.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"readJson.sync","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/readJson.sync.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"readJson.async","file":"nodekit/mod.ts","doc":"","url":"./nodekit/mod.ts/~/readJson.async.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"recreateDirectory","file":"nodekit/mod.ts","doc":"Recreate a directory\n","url":"./nodekit/mod.ts/~/recreateDirectory.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"writeFileSimple","file":"nodekit/mod.ts","doc":"Write file content to filesystem\n","url":"./nodekit/mod.ts/~/writeFileSimple.html","deprecated":false},{"kind":[{"char":"v","kind":"Variable","title":"Variable"},{"char":"v","kind":"Variable","title":"Variable"}],"name":"writeJson","file":"nodekit/mod.ts","doc":"Write json or jsonc file content to filesystem\n","url":"./nodekit/mod.ts/~/writeJson.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"readJson.sync","file":"nodekit/src/json.ts","doc":"","url":"./nodekit/src/json.ts/~/readJson.sync.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"readJson.async","file":"nodekit/src/json.ts","doc":"","url":"./nodekit/src/json.ts/~/readJson.async.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.env","file":"nodekit/src/which.ts","doc":"Gets an environment variable.","url":"./nodekit/src/which.ts/~/Environment.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.stat","file":"nodekit/src/which.ts","doc":"Resolves the `NodeFS.Dirent` for the specified\npath following symlinks.","url":"./nodekit/src/which.ts/~/Environment.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.statSync","file":"nodekit/src/which.ts","doc":"Synchronously resolves the `NodeFS.Dirent` for\nthe specified path following symlinks.","url":"./nodekit/src/which.ts/~/Environment.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"Environment.requestPermission","file":"nodekit/src/which.ts","doc":"Optional method for requesting broader permissions for a folder\ninstead of asking for each file when the operating system requires\nprobing multiple files for an executable path.\n\nThis is not the default, but is useful on Windows for example.","url":"./nodekit/src/which.ts/~/Environment.requestPermission.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"Environment.os","file":"nodekit/src/which.ts","doc":"Gets the current operating system.","url":"./nodekit/src/which.ts/~/Environment.os.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.env","file":"nodekit/src/which.ts","doc":"","url":"./nodekit/src/which.ts/~/RealEnvironment.prototype.env.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.stat","file":"nodekit/src/which.ts","doc":"","url":"./nodekit/src/which.ts/~/RealEnvironment.prototype.stat.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.statSync","file":"nodekit/src/which.ts","doc":"","url":"./nodekit/src/which.ts/~/RealEnvironment.prototype.statSync.html","deprecated":false},{"kind":[{"char":"m","kind":"Method","title":"Method"}],"name":"RealEnvironment.prototype.os","file":"nodekit/src/which.ts","doc":"","url":"./nodekit/src/which.ts/~/RealEnvironment.prototype.os.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"},{"char":"f","kind":"Function","title":"Function"}],"name":"transformRecordEntries","file":"toolkit/mod.ts","doc":"Transforms a record by applying a function to each key-value pair. The function can optionally transform both keys and values.\n","url":"./toolkit/mod.ts/~/transformRecordEntries.html","deprecated":false}]};
})()